#+title: The Genre Factor
#+author: Henry Krämerkämper

*** Prerequisites

**** Poetry

The dependencies of this project are managed by [[https://python-poetry.org/][poetry]]. From the poetry website:

#+begin_quote
Poetry - Python packaging and dependency management made easy

Develop - Poetry comes with all the tools you might need to manage your projects in a deterministic way.

Build - Easily build and package your projects with a single command.

Publish - Make your work known by publishing it to PyPI.

Track - Having an insight of your project's dependencies is just one command away.

Dependency resolver - Poetry comes with an exhaustive dependency resolver, which will always find a solution if it exists.

Isolation  - Poetry either uses your configured virtualenvs or creates its own to always be isolated from your system.
#+end_quote

The last part is probably the most relevant here: poetry allows us to specify all dependencies
in a text file (the [[./pyproject.toml][pyproject.toml]] file). It then creates a python virtualenv with these
specifications. This way, we will never have any clashes regarding different versions installed
on different machines.

Installation of poetry is straight forward:

#+begin_src bash
curl -sSL https://install.python-poetry.org | python3 -
#+end_src

The full installation manual is [[https://python-poetry.org/docs/#installing-with-the-official-installer][here]]. However, the command above should be enough.

To activate command completion in the terminal you have to run

#+begin_src bash
poetry completions bash >> ~/.bash_completion
#+end_src

*** Structure

So far, we have the project has two (very broad) main folders; one for scripts and one for
tests.

Also, there is a folder for the raw datasets (data) and graphics output should be saved in
a folder called figures.

There is a small [[./Todo.org][Todo-File]], which can be used for planning/scheduling/assigning tasks.

*** Running scripts

To run a script, use

#+begin_src bash
poetry run python your_script.py
#+end_src

*** Installing dependencies that another user added to the .toml file

When another user added a dependency to the .toml file and pushed it via git, you can
sync your own virtualenv by running

#+begin_src bash
poetry install --sync
#+end_src

*** Adding packages to the .toml yourself

If you would like to add another package to the project, you can run

#+begin_src bash
poetry add numpy
#+end_src

In this example I used numpy, which is already installed, but you get the point.
You can always edit the [[./pyproject.toml][pyproject.toml]]-file manually; this might be handy if you
want to have a specific version.

After adding a package to the project, to install it, you can run

#+begin_src bash
poetry install
#+end_src

which should sort out all version conflicts and install the specified packages in
the virtualenv.
